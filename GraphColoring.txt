Implement a solution for a Constraint Satisfaction Problem using Branch and Bound and
Backtracking for a graph coloring problem.
Code:
V = 4

def printSolution(color):
    print("Solution Exists: Following are the assigned colors")
    for i in range(V):
        print(color[i], end=" ")
    print()

def isSafe(graph, color):
    for i in range(V):
        for j in range(i+1, V):
            if graph[i][j] and color[j] == color[i]:
                return False
    return True

def graphColoring(graph, m, i, color):
    if i == V:
        if isSafe(graph, color):
            printSolution(color)
            return True
        return False
    for j in range(1, m+1):
        color[i] = j
        if graphColoring(graph, m, i+1, color):
            return True
        color[i] = 0
    return False

graph = [[0, 1, 1, 1],
         [1, 0, 1, 0],
         [1, 1, 0, 1],
         [1, 0, 1, 0]]

m = 3
color = [0] * V

if not graphColoring(graph, m, 0, color):
    print("Solution does not exist")
Output:
Solution Exists: Following are the assigned colors
1 2 3 2

&gt; Graph Coloring Problem :
We need to colour the nodes of the
graph with 3 different colors (red,
green , blue )
But no two adjacent node can be of
same colour
There can be multiple solution of the
graph colouring